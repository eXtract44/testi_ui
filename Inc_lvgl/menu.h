/*
 * menu.h
 *
 *  Created on: 24.10.2021
 *      Author: O. Onopriienko
 */

#ifndef INC_MENU_H_
#define INC_MENU_H_


#include "stm32f4xx_hal.h"
#include <stdbool.h>
#include "../lvgl/lvgl.h"

#define MIN_INPUT_VOLTAGE 0.0f
#define MAX_INPUT_VOLTAGE 10.0f
#define button_selection_method_1 LV_EVENT_LONG_PRESSED //btn main menu
#define button_selection_method_2 LV_EVENT_CLICKED //btn sensor menu
#define button_selection_method_3 LV_EVENT_LONG_PRESSED //btn aktor menu

typedef struct {
	const lv_coord_t x_ofs;
	const lv_coord_t y_ofs;
	const lv_coord_t x_pos;
	const lv_coord_t y_pos;
	const lv_coord_t width;
	const lv_coord_t height;
	const lv_align_t align;
} para_t;


#define NUMBERS_OF_BUTTONS_MAIN 4
#define NUMBERS_OF_BUTTONS_SENSOR 5
#define NUMBERS_OF_BUTTONS_SENSOR_SPINBOX 5
#define NUMBERS_OF_OBJECTS_SPINBOX 8
#define NUMBERS_OF_OBJECTS_PT100_SENSOR 4
#define NUMBERS_OF_BUTTONS_ACTOR 5
#define NUMBERS_OF_OBJECTS_SETTINGS 5

#define NUMBERS_OF_FONTS 3
#define NUMBERS_OF_STYLES 7
#define NUMBERS_OF_OBJECTS 80

enum namesOfObjects {
	MAIN_SCREEN,
	MAIN_SCREEN_BACKGROUND,
	MAIN_SCREEN_BUTTON_1,
	MAIN_SCREEN_BUTTON_2,
	MAIN_SCREEN_BUTTON_3,
	MAIN_SCREEN_BUTTON_4,

	BAR_BATTERY,
	VALUE_BATTERY,
	BAR_TEMPERATURE,
	VALUE_TEMPERATURE,

	SENSOR_SCREEN,
	SENSOR_SCREEN_BACKGROUND,
	SENSOR_SCREEN_BUTTON_1,
	SENSOR_SCREEN_BUTTON_2,
	SENSOR_SCREEN_BUTTON_3,
	SENSOR_SCREEN_BUTTON_4,
	SENSOR_SCREEN_BUTTON_5,
	SENSOR_VALUE_INPUT_1,
	SENSOR_VALUE_INPUT_2,
	SENSOR_VALUE_INPUT_1_SCALED,
	SENSOR_VALUE_INPUT_2_SCALED,
	SENSOR_VALUE_OUTPUT_24V,
	SENSOR_VALUE_OUTPUT_mA,
	SENSOR_VALUE_MIN_MAX_MEASURE_RANGE_1,
	SENSOR_VALUE_MIN_MAX_MEASURE_RANGE_2,
	SENSOR_SPINBOX_1,
	SENSOR_SPINBOX_2,
	SENSOR_SPINBOX_1_BUTTON_1,
	SENSOR_SPINBOX_1_BUTTON_2,
	SENSOR_SPINBOX_2_BUTTON_1,
	SENSOR_SPINBOX_2_BUTTON_2,
	SENSOR_SPINBOX_1_2_BUTTON1,
	SENSOR_SPINBOX_BACKGROUND,
	SENSOR_PT100_CHART,
	SENSOR_PT100_CHART_BACKGROUND,
	SENSOR_PT100_BUTTON_1,
	SENSOR_PT100_VALUE,

	ACTOR_SCREEN,
	ACTOR_SCREEN_BACKGROUND,
	ACTOR_SCREEN_BUTTON_1,
	ACTOR_SCREEN_BUTTON_2,
	ACTOR_SCREEN_BUTTON_3,
	ACTOR_SCREEN_BUTTON_4,
	ACTOR_SCREEN_BUTTON_5,
	ACTOR_SWITCH_SCREEN_BACKGROUND,
	ACTOR_SWITCH_SCREEN_BUTTON_1,
	ACTOR_SWITCH_SCREEN_BUTTON_2,
	ACTOR_VALUE_INPUT_1,
	ACTOR_VALUE_INPUT_2,
	ACTOR_INPUT1_OPEN,
	ACTOR_INPUT2_CLOSED,
	ACTOR_VALUE_OUTPUT_0_10V,
	ACTOR_VALUE_OUTPUT_24V,
	ACTOR_VALUE_OUTPUT_mA,

	SETTINGS_SCREEN,
	SETTINGS_SCREEN_BACKGROUND,
	SETTINGS_SCREEN_BUTTON_1,
	SETTINGS_SCREEN_SLIDER_BRIGHTNESS,
	SETTINGS_SCREEN_SLIDER_VOLUME,
	SETTINGS_SCREEN_SLIDER_VIBRATION,
	SETTINGS_SCREEN_SLIDER_STANDBY,
	SETTINGS_SCREEN_SLIDER_BRIGHTNESS_VALUE,
	SETTINGS_SCREEN_SLIDER_VOLUME_VALUE,
	SETTINGS_SCREEN_SLIDER_VIBRATION_VALUE,
	SETTINGS_SCREEN_SLIDER_STANDBY_VALUE,
	SETTINGS_SCREEN_ADC_BACKGROUND,
	SETTINGS_SCREEN_ADC_BUTTON_1,
	SETTINGS_SCREEN_ADC_VALUE_RAW_BATTERY,
	SETTINGS_SCREEN_ADC_VALUE_RAW_PT100,
	SETTINGS_SCREEN_ADC_VALUE_RAW_OUTPUT_0_10V,
	SETTINGS_SCREEN_ADC_VALUE_RAW_INPUT_1,
	SETTINGS_SCREEN_ADC_VALUE_RAW_INPUT_2,
	SETTINGS_SCREEN_ADC_VALUE_RAW_MCU_TEMPERATURE,

	INFO_SCREEN,
	INFO_SCREEN_BACKGROUND,
	INFO_SCREEN_BUTTON_1,
};

enum namesOfFonts {
	FONT_SMALL, FONT_MEDIUM, FONT_LARGE,
};
enum namesOfTheme {
 THEME_TEXT_SMALL,THEME_TEXT_MEDIUM, THEME_TEXT_LARGE,
};
enum namesOfStyles {
	STYLE_TEXT_DEFAULT,
	STYLE_TEXT_LARGE,
	STYLE_TEXT_MEDIUM,
	STYLE_TEXT_SMALL,
	STYLE_BAR_BATTERY,
	STYLE_BAR_MCU_TEMPERATURE,
	STYLE_BAR_BACKGROUND,
};
enum currentMenu {
	CURRENT_MENU_DEFAULT,
	CURRENT_MENU_MAIN,
	CURRENT_MENU_MAIN_SETTINGS,
	CURRENT_MENU_MAIN_ADC,
	CURRENT_MENU_MAIN_INFO,
	CURRENT_MENU_SENSOR,
	CURRENT_MENU_SENSOR_MEAS_RANGE_1,
	CURRENT_MENU_SENSOR_MEAS_RANGE_2,
	CURRENT_MENU_SENSOR_PT100,
	CURRENT_MENU_ACTOR_Y,
	CURRENT_MENU_ACTOR_SWITCH,
	CURRENT_MENU_INFO,
};





float map_val(float x, float in_min, float in_max, float out_min, float out_max);
void init_lv_objects();
void key_up();
void key_down();
void key_right();
void key_left();
#endif /* INC_MENU_H_ */
